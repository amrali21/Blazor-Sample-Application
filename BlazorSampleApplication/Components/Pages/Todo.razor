@using BlazorSampleApplication.Models;
@using BlazorSampleApplication.Services
@using BlazorSampleApplication.DbModels
@page "/todo"

@rendermode InteractiveServer
@inject TodoRepository repo;

<h3>Todo (@todos.Count(todo => todo.IsDone != null && todo.IsDone != false))</h3>
<ul>
    @foreach (var todo in todos)
    {
        <li>
            <input type="checkbox" @bind="todo.IsDone" @onclick="() => ChangeDoneStatus(todo)"/>
            @todo.Title
            <button @onclick="() => Edit(todo)">Edit</button>
            <button @onclick="() => Delete(todo)">Delete</button>
        </li>
    }
</ul>
<input @bind="newTodo" />

@if (!editMode)
{
    <button @onclick="AddTodo">Add todo</button>
}
else
{
    <button @onclick="SaveEdit">Edit</button>
    <button @onclick="()=> {editMode = false;}">Cancel</button>
}

@code {
    private List<DbModels.Todo> todosDB = new();
    private List<TodoItem> todos = new();

    string newTodo = "";
    bool editMode = false;
    TodoItem itemToEdit = null;

    protected override async Task OnInitializedAsync()
    {
        todosDB = await repo.GetTodosAsync();
        todos = todosDB.Select(t => new TodoItem
            {
                Id = t.Id,
                Title = t.Title,
                IsDone = t.IsDone
            }).ToList();
    }

    async void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            var todo = new TodoItem { Title = newTodo };
            newTodo = string.Empty;

            todos.Add(todo);
            await repo.AddTodoAsync(MapTodo(todo));
        }
    }

    async void SaveEdit()
    {
        itemToEdit.Title = newTodo;
        newTodo = "";

        await repo.UpdateTodoAsync(MapTodo(itemToEdit));

        editMode = false;
    }

    async void Edit(TodoItem item)
    {
        newTodo = item.Title;
        itemToEdit = item;

        editMode = true;
    }

    async void Delete(TodoItem todo)
    {
        todos.Remove(todo);
        await repo.DeleteTodoAsync(todo.Id.ToString());
    }

    async void ChangeDoneStatus(TodoItem todo)
    {
        // e.Value contains the checked status as an object (true/false)

        todo.IsDone = !todo.IsDone;
        await repo.UpdateTodoAsync(MapTodo(todo));

    }

    DbModels.Todo MapTodo(TodoItem todo)
    {
        return new DbModels.Todo
            {
                Id = todo.Id,
                Title = todo.Title,
                IsDone = todo.IsDone
            };
    }
}
